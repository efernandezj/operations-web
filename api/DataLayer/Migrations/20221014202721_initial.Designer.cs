// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221014202721_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DataLayer.Entities.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.HasKey("BankId")
                        .HasName("pkBank");

                    b.HasIndex("SiteId");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            BankId = 1,
                            BankName = "Banco de Costa Rica",
                            IsActive = true,
                            SiteId = 1
                        },
                        new
                        {
                            BankId = 2,
                            BankName = "Banco Nacional de Costa Rica",
                            IsActive = true,
                            SiteId = 1
                        },
                        new
                        {
                            BankId = 3,
                            BankName = "Banco BAC San Jose S.A.",
                            IsActive = true,
                            SiteId = 1
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Employee", b =>
                {
                    b.Property<int>("Workday")
                        .HasColumnType("int");

                    b.Property<string>("BackAccountNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FireDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdCard")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Workday")
                        .HasName("pkEmployee");

                    b.HasIndex("BankId");

                    b.HasIndex("JobId");

                    b.HasIndex("SiteId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Workday = 1001,
                            BankId = 1,
                            Birthdate = new DateTime(2022, 10, 14, 20, 27, 21, 510, DateTimeKind.Utc).AddTicks(2880),
                            FirstName = "Esteban",
                            HireDate = new DateTime(2022, 10, 14, 20, 27, 21, 510, DateTimeKind.Utc).AddTicks(2884),
                            IdCard = 102220333,
                            IsActive = true,
                            JobId = 1,
                            LastName = "Fernandez",
                            Salary = 9000.00m,
                            SiteId = 1,
                            SupervisorId = 1001
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.JobTitle", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("JobId")
                        .HasName("pkJob");

                    b.ToTable("JobTitles");

                    b.HasData(
                        new
                        {
                            JobId = 1,
                            IsActive = true,
                            Title = "Designer"
                        },
                        new
                        {
                            JobId = 2,
                            IsActive = true,
                            Title = "Supervisor"
                        },
                        new
                        {
                            JobId = 3,
                            IsActive = true,
                            Title = "Manager"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ComponentSubModuleName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModuleName")
                        .HasColumnType("longtext");

                    b.Property<string>("SubModuleName")
                        .HasColumnType("longtext");

                    b.HasKey("ModuleId")
                        .HasName("pkModule");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            ModuleId = 1,
                            ComponentSubModuleName = "employee",
                            IsActive = true,
                            ModuleName = "payroll",
                            SubModuleName = "Employee"
                        },
                        new
                        {
                            ModuleId = 2,
                            ComponentSubModuleName = "incident",
                            IsActive = true,
                            ModuleName = "payroll",
                            SubModuleName = "Incident"
                        },
                        new
                        {
                            ModuleId = 3,
                            ComponentSubModuleName = "incidentApproval",
                            IsActive = true,
                            ModuleName = "payroll",
                            SubModuleName = "Incident Approval"
                        },
                        new
                        {
                            ModuleId = 4,
                            ComponentSubModuleName = "user",
                            IsActive = true,
                            ModuleName = "security",
                            SubModuleName = "User"
                        },
                        new
                        {
                            ModuleId = 5,
                            ComponentSubModuleName = "role",
                            IsActive = true,
                            ModuleName = "security",
                            SubModuleName = "Role"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Policy", b =>
                {
                    b.Property<int>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Create")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Delete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Edit")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("View")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("PolicyId")
                        .HasName("pkPolicy");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("DataLayer.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RoleName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("RoleId")
                        .HasName("pkRole");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedBy = 1001,
                            CreationDate = new DateTime(2022, 10, 14, 14, 27, 21, 513, DateTimeKind.Local).AddTicks(4414),
                            Description = "root access",
                            IsActive = true,
                            RoleName = "root"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Site", b =>
                {
                    b.Property<int>("SiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SiteName")
                        .HasColumnType("longtext");

                    b.HasKey("SiteId")
                        .HasName("pkSite");

                    b.ToTable("Sites");

                    b.HasData(
                        new
                        {
                            SiteId = 1,
                            IsActive = true,
                            SiteName = "Costa Rica - San Jose"
                        },
                        new
                        {
                            SiteId = 2,
                            IsActive = true,
                            SiteName = "Mexico - Mexicali"
                        },
                        new
                        {
                            SiteId = 3,
                            IsActive = true,
                            SiteName = "China - "
                        },
                        new
                        {
                            SiteId = 4,
                            IsActive = true,
                            SiteName = "Spain - Madrid"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.Property<int>("Workday")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<long?>("RefreshTokenExp")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Workday")
                        .HasName("pkUser");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Workday = 1001,
                            Email = "esteban@hotmail.com",
                            IsActive = true,
                            Password = "lz2ZrEsIER3XoE79aWAi2kAi5CckccEK90P4Bxvjoc8=",
                            Username = "esteban.fernandez"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Bank", b =>
                {
                    b.HasOne("DataLayer.Entities.Site", "Site")
                        .WithMany("Banks")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkBank_Site");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("DataLayer.Entities.Employee", b =>
                {
                    b.HasOne("DataLayer.Entities.Bank", "Bank")
                        .WithMany("Employees")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fkEmployee_Bank");

                    b.HasOne("DataLayer.Entities.JobTitle", "JobTitle")
                        .WithMany("Employees")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fkEmployee_JobTitle");

                    b.HasOne("DataLayer.Entities.Site", "Site")
                        .WithMany("Employees")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fkEmployee_Site");

                    b.Navigation("Bank");

                    b.Navigation("JobTitle");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("DataLayer.Entities.Policy", b =>
                {
                    b.HasOne("DataLayer.Entities.Module", "Module")
                        .WithMany("Policies")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fkModule_Policy");

                    b.HasOne("DataLayer.Entities.Role", "Role")
                        .WithMany("Policies")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkRole_Policy");

                    b.Navigation("Module");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataLayer.Entities.Role", b =>
                {
                    b.HasOne("DataLayer.Entities.User", "Creator")
                        .WithMany("RolesCreator")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkRole_User_CreatedBy");

                    b.HasOne("DataLayer.Entities.User", "Modifier")
                        .WithMany("RolesModifier")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fkRole_User_UpdatedBy");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.HasOne("DataLayer.Entities.Employee", "Employee")
                        .WithMany("Users")
                        .HasForeignKey("Workday")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkUser_Employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DataLayer.Entities.Bank", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DataLayer.Entities.Employee", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataLayer.Entities.JobTitle", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DataLayer.Entities.Module", b =>
                {
                    b.Navigation("Policies");
                });

            modelBuilder.Entity("DataLayer.Entities.Role", b =>
                {
                    b.Navigation("Policies");
                });

            modelBuilder.Entity("DataLayer.Entities.Site", b =>
                {
                    b.Navigation("Banks");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.Navigation("RolesCreator");

                    b.Navigation("RolesModifier");
                });
#pragma warning restore 612, 618
        }
    }
}
